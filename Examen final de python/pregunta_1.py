# -*- coding: utf-8 -*-
"""Pregunta1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WEls8qXw64dtDyerrsBXJcirBcW3ndZZ

Ejercicio 1¶
El fichero titanic.csv contiene información sobre los pasajeros del Titanic.

Escribir un programa con los siguientes requisitos:

1. Generar un DataFrame con los datos del fichero.
2. Mostrar por pantalla las dimensiones del DataFrame, el número de datos que 
contiene, los nombres de sus columnas y filas, los tipos de datos de las columnas, las 10 primeras filas y las 10 últimas filas
3. Mostrar por pantalla los datos del pasajero con identificador 148.
4. Mostrar por pantalla las filas pares del DataFrame
5. Mostrar por pantalla los nombres de las personas que iban en primera clase ordenadas alfabéticamente.
6. Mostrar por pantalla el porcentaje de personas que sobrevivieron y murieron.
7. Mostrar por pantalla el porcentaje de personas que sobrevivieron en cada clase.
8. Eliminar del DataFrame los pasajeros con edad desconocida.
9. Mostrar por pantalla la edad media de las mujeres que viajaban en cada clase.
10. Añadir una nueva columna booleana para ver si el pasajero era menor de edad o no.
11. Mostrar por pantalla el porcentaje de menores y mayores de edad que sobrevivieron en cada clase.
"""

!pip install pandas

# Importamos librerias 
import pandas as pd
import io
import os

from google.colab import files

"""Cargando files

"""

# Cargo archivos
uploaded = files.upload()

# Creamos el DataFrame lo cual nos permite mayor control sobre el archivo 

df = pd.read_csv("titanic.csv",sep = ",")
df.head()

##Mostrar por pantalla las dimensiones del DataFrame, el número de datos que 
##contiene, los nombres de sus columnas y filas, los tipos de datos de las columnas, las 10 primeras filas y las 10 últimas filas
# Head -> Permite imprimir las funciones antescedentes 
df.head()

# tail-> Esta opción nos permite visualizar los últimos datos del archivo
df.tail()

## shape -> Muestra de forma numerica las filas y columnas 
df.shape

df.describe()

df.dtypes

##Mostrar por pantalla los datos del pasajero con identificador 148.
x = df["PassengerId"]==148
df[x]

##Mostrar por pantalla las filas pares del DataFrame

df[::2]

## 6. Mostrar por pantalla el porcentaje de personas que sobrevivieron y murieron.

print(df["Survived"].value_counts()/df["Survived"].count()*100)


### Segunda alternativa

print(df["Survived"].value_counts(normalize=True)*100)

df["Pclass"].unique()

## 7 Mostrar por pantalla los nombres de las personas que iban en primera clase ordenadas alfabéticame

cond = (df["Pclass"] == 1)
x = df[cond].sort_values(by="Name",ascending = True)
x["Name"].head()

### 8. Mostrar por pantalla el porcentaje de personas que sobrevivieron en cada clase

print(df.groupby("Pclass")["Survived"].value_counts(normalize=True))

## 8. Eliminar del DataFrame los pasajeros con edad desconocida


df.dropna(subset=['Age'])

"""9. Mostrar por pantalla la edad media de las mujeres que viajaban en cada clase."""

m = df.groupby(['Pclass','Sex'])['Age'].mean().unstack()['female']
print(m)



"""10 Añadir una nueva columna booleana para ver si el pasajero era menor de edad o no"""

def mayor_menor_edad(edad):
  if edad >= 18:
    return True
  else:
    return False

##Señalamos que cree columna
df["val_edad_bool"]= df.Age.apply(mayor_menor_edad)

df.head()

lista_edades = [12,23,15]
for e in lista_edades:
  print(mayor_menor_edad(e))

"""11. Mostrar por pantalla el porcentaje de menores y mayores de edad que sobrevivieron en cada clase

Exportando datos
"""

df.to_excel("descarga.xlsx",sheet_name="nuevo",index=False)
files.download("descarga.xlsx")







